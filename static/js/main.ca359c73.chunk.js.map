{"version":3,"sources":["components/LicensePlateInput.js","components/ValidatedPlates.js","validator/license_regex.js","validator/license_validation.js","App.js","serviceWorker.js","index.js"],"names":["LicensePlateInput","props","className","type","name","placeholder","onChange","changed","value","current","onClick","click","isInvalid","ValidatedPlates","validated","plates","map","el","index","key","plateNo","licenseType","isValid","plate_types","vintage","old","new","regx_values","Object","values","regx_keys","keys","getLicenseType","plateNumber","searchPos","findIndex","match","err","App","useState","allPlates","setPlates","currentPlate","setCurrentPlate","plateValidity","setPlateValidity","isValidLicense","event","target","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAgCeA,G,MA5BW,SAAAC,GACtB,OACI,yBAAKC,UAAU,SAEX,2BACIC,KAAK,OACLC,KAAK,iBACLC,YAAY,4BACZH,UAAU,cACVI,SAAUL,EAAMM,QAChBC,MAAOP,EAAMQ,UAGjB,4BACGP,UAAU,cACVQ,QAAST,EAAMU,OAFlB,YAMA,yBACIT,UAAS,UAAKD,EAAMW,UAAY,gBAAkB,iBADtD,4BCIGC,G,MAvBS,SAAAZ,GACpB,OACI,yBACIC,UAAU,oBAGND,EAAMa,UAAUC,OAAOC,KAAI,SAACC,EAAIC,GAC5B,OACI,yBACIC,IAAKD,EACLhB,UAAU,mBAEV,uBAAGiB,IAAG,aAAQD,GAAShB,UAAU,gBAAgBe,EAAGG,SACpD,uBAAGD,IAAG,aAAQD,GAAShB,UAAS,uBAAkBe,EAAGI,cAAgBJ,EAAGI,aACxE,uBAAGF,IAAG,aAAQD,GAAShB,UAAU,kBAAjC,UAAsDe,EAAGK,QAAU,QAAU,mBCfnGC,EAAc,CAChBC,QAAS,iDACTC,IAAM,mDACNC,IAAK,kFAKHC,EAAcC,OAAOC,OAAON,GAC5BO,EAAYF,OAAOG,KAAKR,GCoBxBS,EAAiB,SAAAC,GACnB,IAAIC,GAAa,EAEjB,GAA2B,kBAAjBD,EACN,MAhCsB,IAmC1B,IACIC,EAAYP,EAAYQ,WAAU,SAAAlB,GAAE,OAAIgB,EAAYG,MAAMnB,MAE9D,MAAMoB,GACF,MArCU,IAwCd,OAAOH,GAAa,EAAIJ,EAAUI,IAzCZ,KC6DXI,G,MA1DH,WAAM,MAGeC,mBAAS,CACtCxB,OAAO,KAJO,mBAGTyB,EAHS,KAGEC,EAHF,OAQwBF,mBAAS,CAC/CnB,QAAS,KATK,mBAQTsB,EARS,KAQKC,EARL,OAY0BJ,mBAAS,CACjD3B,WAAW,IAbG,mBAYTgC,EAZS,KAYMC,EAZN,KAwChB,OACE,yBAAK3C,UAAU,OAEb,uDAEA,kBAAC,EAAD,CACES,MAzBgB,WACpB,IAAIW,EDlBe,SAAAW,GACnB,IAAIC,GAAa,EAEjB,GAA2B,kBAAjBD,EACN,MAZsB,IAe1B,IACIC,EAAYP,EAAYQ,WAAU,SAAAlB,GAAE,OAAIgB,EAAYG,MAAMnB,MAE9D,MAAMoB,GACF,MAjBU,IAoBd,OAAOH,GAAa,ECINY,CAAeJ,EAAatB,SAE1C,GAAGE,EAAQ,CAETuB,EAAiB,CAACjC,WAAU,IAE5B,IAAIG,EAAM,sBAAOyB,EAAUzB,QAAjB,CAAyB,CAACO,UAASF,QAAQsB,EAAatB,QAASC,YAAaW,EAAeU,EAAatB,YACpHqB,EAAU,CAAC1B,gBAGR8B,EAAiB,CAACjC,WAAW,KAe9BL,QAXqB,SAAAwC,GACvBJ,EAAgB,CAACvB,QAAS2B,EAAMC,OAAOxC,SAWrCC,QAASiC,EAAatB,QACtBR,UAAWgC,EAAchC,YAG3B,kBAAC,EAAD,CAAiBE,UAAW0B,OChDdS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca359c73.chunk.js","sourcesContent":["import React from 'react';\r\nimport './LicensePlateInput.css';\r\n\r\n// Lets the user input a plate number. Once the Validate button pressed validatePlate() in App.js is called.\r\nconst LicensePlateInput = props => {\r\n    return(\r\n        <div className=\"plate\">\r\n\r\n            <input\r\n                type='text'\r\n                name='txtPlateNumber'\r\n                placeholder=\"Enter license number here\"\r\n                className='plate-input'\r\n                onChange={props.changed}\r\n                value={props.current}\r\n              />\r\n\r\n            <button\r\n               className='btnValidate'\r\n               onClick={props.click}>\r\n                   Validate\r\n            </button>\r\n\r\n            <div\r\n                className={`${props.isInvalid ? 'error-visible' : 'error-hidden'}`}\r\n            >\r\n                    Invalid Plate Number!\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LicensePlateInput","import React from 'react';\r\nimport './ValidatedPlates.css';\r\n\r\n// Displays a collection of validated plate numbers\r\nconst ValidatedPlates = props => {\r\n    return(\r\n        <div\r\n            className=\"validated-plates\"\r\n        >\r\n            {\r\n                props.validated.plates.map((el, index) => {\r\n                    return(\r\n                        <div\r\n                            key={index}\r\n                            className=\"validated-plate\"\r\n                        >\r\n                            <p key={`pn-${index}`} className=\"plate-number\">{el.plateNo}</p>\r\n                            <p key={`lt-${index}`} className={`license-type ${el.licenseType}`}>{el.licenseType}</p>\r\n                            <p key={`pv-${index}`} className=\"plate-validity\">{`${el.isValid ? \"Valid\" : \"Invalid\"}`}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ValidatedPlates","\r\n// Adding the regex for each plate type\r\n\r\nconst plate_types = {\r\n    vintage: /^\\s*[0-9]{1,2}\\s+[sSrRiI]{3}\\s+([0-9]{4})\\s*$/g,\r\n    old:  /^\\s*[0-9]{2,3}(\\s*([-]|[\\s]{1})\\s*)[0-9]{4}\\s*$/g,\r\n    new: /^\\s*([a-zA-Z]{0}\\s*|[a-zA-Z]{2}\\s+)\\s*[a-zA-Z]{2,3}(\\s*[-|\\s]\\s*)[0-9]{4}\\s*$/g\r\n}\r\n\r\n// Separating the keys and values for clarity\r\n\r\nconst regx_values = Object.values(plate_types);\r\nconst regx_keys = Object.keys(plate_types);\r\n\r\nexport {\r\n    plate_types,\r\n    regx_values,\r\n    regx_keys\r\n };\r\n","import {regx_keys, regx_values}  from './license_regex';\r\n\r\n\r\n// Error flags\r\nconst INVALID_OPERATION_ERR = 500;\r\nconst INVALID_PLATE_ERR = -510;\r\nconst MATCH_ERR = 505;\r\n\r\n\r\n/* \r\n    Given a plate number (STRING) this function will test its validity\r\n*/\r\nconst isValidLicense = plateNumber => {\r\n    let searchPos = -1;\r\n\r\n    if(typeof(plateNumber) !== \"string\"){\r\n        throw INVALID_OPERATION_ERR;      \r\n    }\r\n    \r\n    try{\r\n        searchPos = regx_values.findIndex(el => plateNumber.match(el));\r\n    }\r\n    catch(err){\r\n        throw MATCH_ERR;\r\n    }    \r\n\r\n    return searchPos > -1 ? true : false;\r\n}\r\n\r\n/* \r\n    Given a plate number (STRING) this function will find the plate type\r\n*/\r\nconst getLicenseType = plateNumber => {\r\n    let searchPos = -1;\r\n\r\n    if(typeof(plateNumber) !== \"string\"){\r\n        throw INVALID_OPERATION_ERR;      \r\n    }\r\n    \r\n    try{\r\n        searchPos = regx_values.findIndex(el => plateNumber.match(el));\r\n    }\r\n    catch(err){\r\n        throw MATCH_ERR;\r\n    }    \r\n\r\n    return searchPos > -1 ? regx_keys[searchPos] : INVALID_PLATE_ERR;\r\n}\r\n\r\nexport {\r\n    getLicenseType,\r\n    isValidLicense\r\n}","import React, {useState} from 'react';\nimport LicensePlateInput from './components/LicensePlateInput';\nimport ValidatedPlates from './components/ValidatedPlates';\n\nimport {isValidLicense, getLicenseType} from  './validator/license_validation';\n\nimport './App.css';\n\nconst App = () => {\n\n  // Validated plate numbers array\n  const [allPlates, setPlates] = useState({\n    plates:[]\n  });\n\n  // Current plate number typed in the input field\n  const [currentPlate, setCurrentPlate] = useState({\n    plateNo: ''\n  });\n\n  const [plateValidity, setPlateValidity] = useState({\n    isInvalid: false\n  })\n\n  // When the user enters a new plate number, it is validated in this function\n  // IsValidLicense - Checks if the license number matches to any predefined regex patterns\n  // if it does, it is a valid plate number.\n  // if invalid, an alert is poped up to notify the user\n  // getLicenseType function then dertermines the type of the plate number (new/ old/ vintage)\n  const validatePlate = () => {\n    let isValid = isValidLicense(currentPlate.plateNo);\n\n    if(isValid){\n\n      setPlateValidity({isInvalid:false});\n\n      let plates = [...allPlates.plates, {isValid, plateNo:currentPlate.plateNo, licenseType: getLicenseType(currentPlate.plateNo)}];\n      setPlates({plates});\n\n    }\n    else setPlateValidity({isInvalid: true});\n  }\n\n  // Stores the current input in the state\n  const plateInput_changed = event => {\n      setCurrentPlate({plateNo: event.target.value});\n  }\n\n  return (\n    <div className=\"App\">\n\n      <h1>License Plate Validator</h1>\n\n      <LicensePlateInput \n        click={validatePlate}\n        changed={plateInput_changed}\n        current={currentPlate.plateNo}\n        isInvalid={plateValidity.isInvalid}\n        />\n\n      <ValidatedPlates validated={allPlates}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}